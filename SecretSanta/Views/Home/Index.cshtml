@{
}

<div class="jumbotron">
    <h2 class="text-center">Secret Santa!</h2>
    <div class="row">
        <div class="col col-sm-11">
            <img class="logo img float-left m-2" src="~/images/logo.png" width="150" />
            <div class="description">
                <p>
                    It's a popular holiday tradition for a gift exchange within a group of people where names are drawn from hat&hellip;blah, blah - who wants to draw names when <b><i>WE HAVE COMPUTERS?!!?!?!</i></b>
                    <br />Below you can tell ol' Computer Santa who all's coming to your Yuletide Shindig and we'll mix it up for ya!
                    You can even add multiple groups if you want to keep certain people from being assigned to each other, etc&hellip;
                </p>
                <p>
                    When you're ready, poke the big red button below to get the party started! <br />
                    <span class="text-muted">(Hey!, you can redraw at anytime if you don't like the way it shakes out)</span>
                </p>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col">
            <p class="clear">
                <button class="btn btn-success" data-bind="click: addGroup" tabindex="-1">Create Group</button>
                <button id="btnDrawNames" type="button" tabindex="-1" class="btn btn-danger float-right"
                        data-loading-text="<span class='glyphicon glyphicon-refresh fast-right-spinner'></span>&nbsp; Drawing&hellip;"
                        data-success-text="Let the gift-giving begin! <span class='glyphicon glyphicon-tree-conifer'></span> <span class='glyphicon glyphicon-gift'></span>"
                        data-bind="click: drawNames">
                    Draw Names
                </button>
            </p>
        </div>
    </div>
</div>

<br />

<div class="row groups" data-bind="foreach: groups">
    <div class="px-2 col-12 col-sm-4 col-md-3" data-bind="attr: { 'data-group': id }">
        <fieldset class="group">
            <div>
                <legend data-bind="text: name, attr: { contenteditable: $index() != 0, 'data-toggle': ($index() != 0) ? 'popover' : '' }"
                        data-content="<nobr>Click to edit the group name</nobr>"
                        data-trigger="hover"
                        data-placement="top"
                        tabindex="-1">
                </legend>
                <span class="btn-close" data-bind="visible: $index() > 0, click: () => { $parent.removeGroup($index()); }">&times;</span>
            </div>
            <span data-bind="html: warningMessage, visible: warningMessage" class="text-warning"></span>
            <table class="table">
                <thead>
                </thead>
                <tbody data-bind="foreach: participants">
                    <tr>
                        <td class="participant">
                            <div class="data" data-bind="editableHTML: $data" contenteditable="true" tabindex="-1"></div>
                            <span class="btn-close" data-bind="click: () => { $parent.removeParticipant($index()); $root.validateGroups(); }">&times;</span>
                        </td>
                    </tr>
                </tbody>
            </table>

            <form data-bind="submit: () => { addParticipant(); $parent.validateGroups(); }">
                <div class="input-group">
                    <input type="text"
                           class="form-control"
                           data-bind="value: newParticipantName, attr: { tabindex: $index() + 1 }"
                           placeholder="Name"
                           autofocus/>
                    <span class="input-group-append">
                        <button type="submit" class="btn" tabindex="-1"><i class="fa fa-plus"></i></button>
                    </span>
                </div>
            </form>
        </fieldset>
    </div>
</div>

<div data-bind="if: results().length > 0">
    <hr />

    <div class="row">
        <div id="results" class="col col-12">
            <fieldset>
                <legend>The results are in!</legend>
                <p>
                    Listed below are the Secret Santas with their Recipients!
                </p>
                <div data-bind="foreach: results">
                    <div class="col col-12">
                        <label data-bind="text: name"></label> -> <span data-bind="text: (recipient || {}).name || '??'"></span>
                    </div>
                </div>
            </fieldset>
        </div>
    </div>
</div>


@section scripts {

    <script type="text/javascript">
        (() => {
            function Group(id, name) {
                var self = this;
                self.id = id;
                self.name = name;
                self.warningMessage = ko.observable('');
                self.participants = ko.observableArray([]);
                self.newParticipantName = ko.observable('');
                self.addParticipant = () => {
                    if (self.newParticipantName()) {
                        self.participants.push(ko.observable(self.newParticipantName()));
                        self.newParticipantName('');
                    }
                    $(`[data-group=${self.id}] [autofocus]:last`).focus();
                };
                self.removeParticipant = (indexToRemove) => {
                    self.participants.splice(indexToRemove, 1);
                };
                self.getParticipants = () => {
                    return self.participants().map((participant) => { return { name: participant() }; });
                };
            }
            function SecretSantaViewModel() {
                var self = this;
                self.groups = ko.observableArray([new Group(0, 'Individual Participants')]);
                self.results = ko.observableArray([]);
                self.addGroup = () => {
                    const groupId = self.groups().length;
                    self.groups.push(new Group(groupId, `Group #${groupId}`));
                    setupPopovers();
                    $('[autofocus]:last').focus();
                };
                self.removeGroup = (indexToRemove) => {
                    self.groups.splice(indexToRemove, 1);
                    self.validateGroups();
                };
                let _validateParticipants = () => {
                    let participantCount = self.groups().reduce((total, group, test) => { return total + group.getParticipants().length; }, 0);
                    // must have participants to draw names
                    if (participantCount == 0) {
                        TOAST.warn('Whoa!, hold on there&hellip;<br />You\'re gonna have to add some people first!');
                        return false;
                    }
                    // must have more than one participant to draw names
                    if (participantCount == 1) {
                        TOAST.warn('Unfortunately, 1 person just isn\'t a party&hellip;<br />You\'re gonna have to add some more people!');
                        return false;
                    }
                    let _sentGroupSizeWarning = false;
                    for (let i = 1; i < self.groups().length; ++i) {
                        let groupSize = self.groups()[i].participants().length;
                        if (groupSize > (participantCount - groupSize)) {
                            if (!_sentGroupSizeWarning) {
                                TOAST.warn('Some of the groups are too big and will result in some participants not getting to play :(');
                                _sentGroupSizeWarning = true;
                            }
                        }
                    }
                    return true;
                };
                self.validateGroups = () => {
                    let participantCount = self.groups().reduce((total, group, test) => { return total + group.getParticipants().length; }, 0);
                    for (let i = 1; i < self.groups().length; ++i) {
                        let groupSize = self.groups()[i].participants().length;
                        if (groupSize > (participantCount - groupSize)) {
                            self.groups()[i].warningMessage('This group is a bit too large - consider breaking it up&hellip;<br /><center><span class="text-muted">(everyone may not get to play)</span></center>');
                        }
                        else if (groupSize == 1) {
                            self.groups()[i].warningMessage('Groups should have <i>at least</i> <b>2</b> members to be effective&hellip;');
                        }
                        else {
                            self.groups()[i].warningMessage('');
                        }
                    }
                };
                self.drawNames = () => {
                    if (_validateParticipants()) {
                        var postData = [];
                        for (let i = 0; i < self.groups().length; ++i) {
                            var groupParticipants = self.groups()[i].getParticipants();
                            // the first group is the Individual Participants and they need to be split up
                            if (i == 0) {
                                for (let j = 0; j < groupParticipants.length; ++j) {
                                    postData.push([groupParticipants[j]]);
                                }
                            }
                            else if (groupParticipants.length > 0) {
                                postData.push(groupParticipants);
                            }
                        }
                        var ajaxSettings = {
                            type: 'POST',
                            url: 'api/SecretSanta/DrawNames',
                            dataType: 'json',
                            contentType: 'application/json; charset=utf-8',
                            data: JSON.stringify(postData),
                        };
                        loadingButtonAjax.call($('#btnDrawNames'), ajaxSettings)
                            .then((data) => {
                                self.results(data);
                                // scroll to the results section
                                document.querySelector('#results').scrollIntoView({
                                    behavior: 'smooth'
                                });
                            });
                    }
                };
            }
            ko.applyBindings(new SecretSantaViewModel());
        })();
        // setup Popovers
        function setupPopovers() {
            $('[data-toggle="popover"]').popover({
                html: true
            });
        }
        setupPopovers();
    </script>
}