@{
}

<div class="bd-callout bd-callout-info mt-0 mb-3 box-shadow">
    <h5>Who wants to draw names <b><i><code>WHEN WE HAVE COMPUTERS?!!?!?!</code></i></b></h5>
    <div class="description mb-3">
        <p>
            Tell ol' Computer Santa who all's coming to your Yuletide Shindig and we'll mix it up for ya!
            <br />You can even add groups if you want to keep certain people from being assigned to each other, etc&hellip;
        </p>
        <p>
            When you're ready, poke the big red button to get the party started! <br/>
            <span class="text-muted">(feel free to redraw at anytime if you don't like the way it shakes out)</span>
        </p>
    </div>
    <div class="row clear">
        <div class="col">
            <p class="clear text-center">
                <button id="btnDrawNames" type="button" tabindex="-1" class="btn btn-danger" style="margin-left: -0.75em;"
                        data-loading-text="<i class='spinner-border spinner-border-sm'></i>&nbsp; Drawing&hellip;"
                        data-success-text="Let the gift-giving begin! <span class='fa fa-tree-conifer'></span> <span class='glyphicon glyphicon-gift'></span>"
                        data-bind="click: drawNames">
                    <b>Draw!</b>
                </button>
            </p>
        </div>
    </div>
</div>

<div class="container-fluid">
    <div class="d-flex justify-content-between mb-3">
        <button class="btn" data-bind="click: addGroup" tabindex="-1"><i class="fa fa-plus"></i> Group</button>
        <div>
            <button class="btn btn-outline-success mr-1" 
                    data-bind="click: saveGroups" 
                    title="Save Participants"
                    tabindex="-1"><i class="fa fa-save"></i> Save</button>
            <button class="btn btn-outline-danger"
                    data-bind="click: resetGroups" 
                    title="Reset Participants"
                    tabindex="-1"><i class="fa fa-trash"></i> Reset</button>
        </div>
    </div>
    <div class="row groups" data-bind="foreach: groups">
        <div class="px-2 col-12 col-sm-4 col-xl-3" data-bind="attr: { 'data-group': id }">
            <fieldset class="group">
                <div>
                    <legend data-bind="editableHTML: name, attr: { contenteditable: $index() != 0 ? 'true' : 'false' }"
                            tabindex="-1">
                        Individual Participants
                    </legend>
                    <span class="btn-close hide" data-bind="css: { hide: $index() === 0 }, click: () => { $parent.removeGroup($index()); }">&times;</span>
                </div>
                <div class="bd-callout bd-callout-warning hide" data-bind="html: warningMessage, css: { hide: !warningMessage()}">test</div>
                <table class="table hide" data-bind="css: { hide: participants().length === 0 }">
                    <thead>
                    </thead>
                    <tbody data-bind="foreach: participants">
                        <tr>
                            <td class="participant">
                                <div class="data" data-bind="editableHTML: $data" contenteditable="true" tabindex="-1"></div>
                                <span class="btn-close" data-bind="click: () => { $parent.removeParticipant($index()); $root.validateGroups(); }">&times;</span>
                            </td>
                        </tr>
                    </tbody>
                </table>

                <form data-bind="submit: () => { addParticipant(); $parent.validateGroups(); }">
                    <div class="input-group">
                        <input type="text"
                               class="form-control"
                               data-bind="value: newParticipantName, attr: { tabindex: $index() + 1 }"
                               placeholder="Name"
                               autofocus />
                        <span class="input-group-append">
                            <button type="submit" class="btn" tabindex="-1"><i class="fa fa-plus"></i></button>
                        </span>
                    </div>
                </form>
            </fieldset>
        </div>
    </div>
</div>

<div class="hide" data-bind="css: { hide: results().length === 0 }">
    <hr class="my-5" />

    <img class="logo img-fluid float-left mr-2" src="~/images/logo.png" style="max-width: 125px;" />
    <h5>The results are in! 🎉</h5>
    <p>We got 'em all matched up! Check it out below to see who's paired with who.</p>
    <p>Go forth and be merry!</p>

    <br />

    <table id="results" class="table table-bordered table-striped table-hover">
        <caption>Secret Santas and their Recipients!</caption>
        <thead>
            <tr>
                <th>Santa</th>
                <th>Recipient</th>
            </tr>
        </thead>
        <tbody data-bind="foreach: results">
            <tr>
                <td data-bind="text: name"></td>
                <td data-bind="html: recipient.name"></td>
            </tr>
        </tbody>
    </table>

    <div class="bd-callout bd-callout-warning">
        <p>
            If you don't like the way the way it all shook out, feel free to
            <button type="button" class="btn btn-outline-primary box-shadow"
                    data-loading-text="<i class='spinner-border spinner-border-sm'></i>&nbsp; Drawing&hellip;"
                    data-bind="click: drawNames">
                draw again 👍
            </button>
        </p>
    </div>
</div>

@section scripts {

    <script type="text/javascript">
        (() => {
            const _defaultGroups = [new Group(0, 'Individual Participants'), new Group(1, 'Group #1')];

            function Group(id, name, participants) {
                var self = this;
                self.id = id;
                self.name = ko.observable(name);
                self.warningMessage = ko.observable('');
                self.participants = ko.observableArray((participants || []).map(x => ko.observable(x)));
                self.newParticipantName = ko.observable('');

                self.addParticipant = () => {
                    if (self.newParticipantName()) {
                        self.participants.push(ko.observable(self.newParticipantName()));
                        self.newParticipantName('');
                    }
                    $(`[data-group=${self.id}] [autofocus]:last`).focus();
                };

                self.removeParticipant = (indexToRemove) => {
                    self.participants.splice(indexToRemove, 1);
                };

                self.getParticipants = () => {
                    return self.participants().map((participant) => { return { name: participant() }; });
                };
            }

            function SecretSantaViewModel() {
                var self = this;

                const savedGroups = JSON.parse(localStorage['groups'] || '[]')
                    .map(x => new Group(x.id, x.name, x.participants));

                self.groups = ko.observableArray(
                    savedGroups.length > 1 || (savedGroups.length === 1 && savedGroups[0].participants().length > 0)
                        ? savedGroups
                        : _defaultGroups);
                self.results = ko.observableArray([]);

                self.addGroup = () => {
                    const groupId = self.groups().length;
                    self.groups.push(new Group(groupId, `Group #${groupId}`));
                    $('[autofocus]:last').focus();
                };

                self.removeGroup = (indexToRemove) => {
                    self.groups.splice(indexToRemove, 1);
                    self.validateGroups();
                };

                self.saveGroups = () => {
                    const flattenedGroups = self.groups()
                        .map(x => ({ ...x, name: x.name(), participants: x.participants().map(p => p()) }));
                    localStorage['groups'] = JSON.stringify(flattenedGroups);
                };

                self.resetGroups = () => {
                    localStorage.removeItem('groups');
                    self.groups(_defaultGroups);
                };

                let _validateParticipants = () => {
                    let participantCount = self.groups().reduce((total, group, test) => { return total + group.getParticipants().length; }, 0);
                    // must have participants to draw names
                    if (participantCount === 0) {
                        Swal.fire({
                            icon: 'warning',
                            title: 'Whoa! Hold on there&hellip;',
                            html: '<hr />You\'re gonna have to add some people first!',

                        });
                        return false;
                    }
                    // must have more than one participant to draw names
                    if (participantCount === 1) {
                        Swal.fire({
                            icon: 'error',
                            title: 'Hate to tell you this, but&hellip;',
                            html: '<hr />Unfortunately, <b>1</b> person just isn\'t a party&hellip;<br />You\'re gonna have to add some more people!',
                        });
                        return false;
                    }
                    let _sentGroupSizeWarning = false;
                    for (let i = 1; i < self.groups().length; ++i) {
                        let groupSize = self.groups()[i].participants().length;
                        if (groupSize > (participantCount - groupSize)) {
                            if (!_sentGroupSizeWarning) {
                                TOAST.warn('Some of the groups are too big and will result in some participants not getting to play :(');
                                _sentGroupSizeWarning = true;
                            }
                        }
                    }
                    return true;
                };

                self.validateGroups = () => {
                    let participantCount = self.groups().reduce((total, group, test) => { return total + group.getParticipants().length; }, 0);
                    for (let i = 1; i < self.groups().length; ++i) {
                        let groupSize = self.groups()[i].participants().length;
                        if (groupSize > (participantCount - groupSize)) {
                            self.groups()[i].warningMessage('This group is a bit too large - consider breaking it up&hellip;<br /><center><span class="text-muted">(everyone may not get to play)</span></center>');
                        } else if (groupSize == 1) {
                            self.groups()[i].warningMessage('Groups should have <i>at least</i> <b>2</b> members to be effective&hellip;');
                        } else {
                            self.groups()[i].warningMessage('');
                        }
                    }
                };

                self.drawNames = (data, event) => {
                    if (_validateParticipants()) {
                        var postData = [];
                        for (let i = 0; i < self.groups().length; ++i) {
                            var groupParticipants = self.groups()[i].getParticipants();
                            // the first group is the Individual Participants and they need to be split up
                            if (i === 0) {
                                for (let j = 0; j < groupParticipants.length; ++j) {
                                    postData.push([groupParticipants[j]]);
                                }
                            } else if (groupParticipants.length > 0) {
                                postData.push(groupParticipants);
                            }
                        }
                        var ajaxSettings = {
                            type: 'POST',
                            url: 'api/SecretSanta/DrawNames',
                            dataType: 'json',
                            contentType: 'application/json; charset=utf-8',
                            data: JSON.stringify(postData),
                        };
                        loadingButtonAjax.call($(event.currentTarget), ajaxSettings)
                            .then(data => data.map(x => {
                                x.recipient = (x.recipient || { name: '<b class="text-danger">??</b>' });
                                return x;
                            }))
                            .then((data) => {
                                self.results(data);
                                // scroll to the results section
                                document.querySelector('#results').scrollIntoView({
                                    behavior: 'smooth'
                                });
                            });
                    }
                };
            }

            ko.applyBindings(new SecretSantaViewModel());

            $('[data-group=0] [autofocus]:last').focus();
        })();
    </script>
}