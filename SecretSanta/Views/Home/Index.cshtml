@{
}

<div class="bd-callout bd-callout-info mt-0 mb-3 box-shadow">
    <h5>Who wants to draw names <b><i><code>WHEN WE HAVE COMPUTERS?!!?!?!</code></i></b></h5>
    <div class="description mb-3">
        <p>
            Tell ol' Computer Santa who all's coming to your Yuletide Shindig and we'll mix it up for ya!
            <br />You can even add groups if you want to keep certain people from being assigned to each other, etc&hellip;
        </p>
        <p>
            When you're ready, poke the big red button to get the party started! <br />
            <span class="text-muted">(feel free to redraw at anytime if you don't like the way it shakes out)</span>
        </p>
    </div>
    <div class="row clear">
        <div class="col">
            <p class="clear text-center">
                <button id="btnDrawNames" type="button" tabindex="-1" class="btn btn-danger" style="margin-left: -0.75em;"
                        data-loading-text="<i class='spinner-border spinner-border-sm'></i>&nbsp; Drawing&hellip;"
                        data-success-text="Let the gift-giving begin! <span class='fa fa-gift'></span> <span class='glyphicon glyphicon-gift'></span>"
                        data-bind="click: drawNames">
                    <b>Draw!</b>
                </button>
            </p>
        </div>
    </div>
</div>

<div class="container-fluid">
    <div class="row justify-content-between mb-3">
        <div class="col-4">
            <button class="btn" data-bind="click: addGroup" tabindex="-1"><i class="fa fa-plus"></i> Group</button>
        </div>
        <div class="col col-sm-8 col-md-6 col-lg-5 col-xl-4">
            <div class="input-group">
                <div class="input-group-prepend">
                    <button type="button" class="btn no-outline" tabindex="-1"
                            data-bind="click: addCollection">
                        <i class="fa fa-plus"></i>
                    </button>
                </div>
                <select class="custom-select" tabindex="-1" onchange="this.blur()"
                        data-bind="options: collections, optionsText: 'name', value: selectedCollection, event: { change: () => focusInput() }">
                </select>
                <div class="input-group-append">
                    <button type="button" class="btn btn-outline-secondary" tabindex="-1"
                            title="save collection"
                            onclick="this.blur()"
                            data-bind="click: editCollection">
                        <i class="fa fa-pencil"></i>
                    </button>
                    <button type="button" class="btn btn-outline-success" tabindex="-1"
                            title="save collection"
                            onclick="this.blur()"
                            data-bind="click: saveCollection">
                        <i class="fa fa-save"></i>
                    </button>
                    <button type="button" class="btn btn-outline-danger" tabindex="-1"
                            title="delete collection"
                            onclick="this.blur()"
                            data-bind="click: deleteCollection">
                        <i class="fa fa-trash"></i>
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div class="row groups" data-bind="foreach: groups">
        <div class="px-2 col-12 col-sm-4 col-xl-3" data-bind="attr: { 'data-group': id }">
            <fieldset class="group">
                <div>
                    <legend data-bind="editableHTML: name, attr: { contenteditable: $index() != 0 ? 'true' : 'false' }"
                            tabindex="-1">
                        Individual Participants
                    </legend>
                    <span class="btn-close hide" data-bind="css: { hide: $index() === 0 }, click: () => { $parent.removeGroup($index()); }">&times;</span>
                </div>
                <div class="bd-callout bd-callout-warning hide" data-bind="html: warningMessage, css: { hide: !warningMessage()}">test</div>
                <table class="table hide" data-bind="css: { hide: participants().length === 0 }">
                    <thead>
                    </thead>
                    <tbody data-bind="foreach: participants">
                        <tr>
                            <td class="participant">
                                <div class="data" data-bind="editableHTML: $data" contenteditable="true" tabindex="-1"></div>
                                <span class="btn-close" data-bind="click: () => { $parent.removeParticipant($index()); $root.validateGroups(); }">&times;</span>
                            </td>
                        </tr>
                    </tbody>
                </table>

                <form data-bind="submit: () => { addParticipant(); $parent.validateGroups(); }">
                    <div class="input-group">
                        <input type="text"
                               class="form-control"
                               data-bind="value: newParticipantName, attr: { tabindex: $index() + 1 }"
                               placeholder="Name"
                               autofocus />
                        <span class="input-group-append">
                            <button type="submit" class="btn" tabindex="-1"><i class="fa fa-plus"></i></button>
                        </span>
                    </div>
                </form>
            </fieldset>
        </div>
    </div>
</div>

<div class="hide" data-bind="css: { hide: results().length === 0 }">
    <hr class="my-5" />

    <img class="logo img-fluid float-left mr-2" src="~/images/logo.png" style="max-width: 125px;" />
    <h5>The results are in! 🎉</h5>
    <p>We got 'em all matched up! Check it out below to see who's paired with who.</p>
    <p>Go forth and be merry!</p>

    <br />

    <table id="results" class="table table-bordered table-striped table-hover">
        <caption>Secret Santas and their Recipients! <span data-bind="text: results_timestamp_formatted()"></span></caption>
        <thead>
            <tr>
                <th>Santa</th>
                <th>Recipient</th>
            </tr>
        </thead>
        <tbody data-bind="foreach: results">
            <tr>
                <td data-bind="text: name"></td>
                <td data-bind="html: recipient.name"></td>
            </tr>
        </tbody>
    </table>

    <div class="bd-callout bd-callout-warning">
        <p>
            If you don't like the way the way it all shook out, feel free to
            <button type="button" class="btn btn-outline-primary box-shadow"
                    data-loading-text="<i class='spinner-border spinner-border-sm'></i>&nbsp; Drawing&hellip;"
                    data-bind="click: drawNames">
                draw again 👍
            </button>
        </p>
    </div>
</div>

@section scripts {
    <script src="https://cdn.jsdelivr.net/npm/uuid@latest/dist/umd/uuidv4.min.js"></script>
    <script type="text/javascript">
        (() => {
            function showError(error) {
                Swal.fire({
                    title: 'Oh No!',
                    html:
                        `<div class="error-messages">
                                <div class="col-12">
                                    <p>${error.message}</p>
                                </div>
                            </div>`,
                    icon: 'error',
                    confirmButtonText: 'OK'
                });
            }

            function getDefaultGroups() {
                return [new Group(0, 'Individual Participants'), new Group(1, 'Group #1')];
            }

            function getDefaultCollections() {
                return [{ id: 0, name: ko.observable('Collection #1'), groups: ko.observableArray(getDefaultGroups()) }];
            }

            function Group(id, name, participants) {
                var self = this;
                self.id = id;
                self.name = ko.observable(name || 'Unknown');
                self.warningMessage = ko.observable('');
                self.participants = ko.observableArray((participants || []).map(x => ko.observable(x)));
                self.newParticipantName = ko.observable('');

                self.addParticipant = () => {
                    if (self.newParticipantName()) {
                        self.participants.push(ko.observable(self.newParticipantName()));
                        self.newParticipantName('');
                    }
                    focusInput(self.id);
                };

                self.removeParticipant = (indexToRemove) => {
                    self.participants.splice(indexToRemove, 1);
                };

                self.getParticipants = () => {
                    return self.participants().map((participant) => { return { name: participant() }; });
                };
            }

            function SecretSantaViewModel() {
                var self = this;

                const savedCollections = JSON.parse(localStorage['collections'] || '[]')
                    .map(x => ({ ...x, name: ko.observable(x.name), groups: ko.observableArray(x.groups.map(g => new Group(g.id, g.name, g.participants))) }));

                self.collections = ko.observableArray(
                    savedCollections.length > 0
                    ? savedCollections
                    : getDefaultCollections());

                self.selectedCollection = ko.observable(self.collections()[0]);

                self.addCollection = () => {
                    Swal.fire({
                        title: 'Add a new collection',
                        html:
                            `<hr/>
                            <div class="text-left">
                                <div class="form-group row">
                                    <label for="swal-form-name" class="col-sm-3 col-form-label">Name:</label>
                                    <div class="col-sm-9">
                                        <input id="swal-form-name" type="text" class="form-control" placeholder="Grandma's house" aria-label="Trigger" required>
                                    </div>
                                </div>
                                <div class="bs-callout bs-callout-warning text-left">
                                    <code>Collections</code> let you create multiple sets of participants
                                </div>
                            </div>`,
                        focusConfirm: false,
                        confirmButtonText: '<i class="fa fa-save"></i>&nbsp;Save',
                        confirmButtonColor: '#28a745',
                        showCancelButton: true,
                        cancelButtonText: 'Nevermind&hellip;',
                        showLoaderOnConfirm: true,
                        customClass: {
                            actions: 'justify-content-end'
                        },
                        preConfirm: () => {
                            const name = document.getElementById('swal-form-name').value;

                            if (!name || !name.trim()) {
                                Swal.showValidationMessage('<code>name</code>&nbsp; cannot be empty!');
                                return false;
                            }

                            self.collections.push({ id: uuidv4(), name: ko.observable(name), groups: ko.observableArray(getDefaultGroups()) });
                            self.selectedCollection(self.collections()[self.collections().length - 1]);
                            setTimeout(focusInput, 250);
                            self.saveCollection();
                        }
                    });
                };

                self.editCollection = () => {
                    const currentCollection = self.selectedCollection();
                    Swal.fire({
                        title: 'Edit collection',
                        html:
                            `<hr/>
                            <div class="text-left">
                                <div class="form-group row">
                                    <label for="swal-form-name" class="col-sm-3 col-form-label">Name:</label>
                                    <div class="col-sm-9">
                                        <input id="swal-form-name" type="text" class="form-control" placeholder="Name" aria-label="Trigger" value="${currentCollection.name()}" required>
                                    </div>
                                </div>
                            </div>`,
                        focusConfirm: false,
                        confirmButtonText: '<i class="fa fa-save"></i>&nbsp;Save',
                        confirmButtonColor: '#28a745',
                        showCancelButton: true,
                        cancelButtonText: 'Nevermind&hellip;',
                        showLoaderOnConfirm: true,
                        customClass: {
                            actions: 'justify-content-end'
                        },
                        preConfirm: () => {
                            const name = document.getElementById('swal-form-name').value;

                            if (!name || !name.trim()) {
                                Swal.showValidationMessage('<code>name</code>&nbsp; cannot be empty!');
                                return false;
                            }

                            currentCollection.name(name);
                            self.saveCollection();
                        }
                    });
                };

                self.saveCollection = (showToast = true) => {
                    const selectedCollection = self.selectedCollection();
                    const flattenedCollection = {
                        ...selectedCollection,
                        name: selectedCollection.name(),
                        groups: selectedCollection.groups().map(g => ({
                            ...g,
                            name: g.name(),
                            participants: g.participants().map(p => p())
                        }))
                    };

                    const idToUpdate = selectedCollection.id;
                    const collections = JSON.parse(localStorage['collections'] || '[]');
                    const index = collections.findIndex(x => x.id === idToUpdate);

                    if (index === -1) {
                        collections.push(flattenedCollection);
                    } else {
                        collections[index] = flattenedCollection;
                    }

                    localStorage['collections'] = JSON.stringify(collections);
                    if (showToast) Toast.fire({ icon: 'success', title: 'Collection saved! 🎉' });

                    focusInput();
                };

                self.deleteCollection = () => {
                    Swal.fire({
                        icon: 'warning',
                        title: 'Are you sure?',
                        html:
                            `<hr/>
                            <div class="bs-callout bs-callout-danger text-left">
                                This action will permanantly wipe the <code>${self.selectedCollection().name()}</code> collection
                            </div>`,
                        focusConfirm: false,
                        confirmButtonText: '🔥 Burn it with fire!',
                        confirmButtonColor: '#dc3545',
                        showCancelButton: true,
                        cancelButtonText: 'Nevermind&hellip;',
                        showLoaderOnConfirm: true,
                        customClass: {
                            actions: 'justify-content-end'
                        },
                        preConfirm: () => {
                            const idToRemove = self.selectedCollection().id;

                            // filter out of localStorage
                            const updatedCollections = JSON.parse(localStorage['collections'] || '[]')
                                .filter(x => x.id != idToRemove);
                            localStorage['collections'] = JSON.stringify(updatedCollections);

                            // filter out of in memory collections
                            self.collections(self.collections().filter(x => {
                                if (x.id != idToRemove) return true;
                                Toast.fire({ icon: 'error', title: `Deleted collection: &nbsp;<b>${x.name()}</b>` });
                            }));

                            // ensure at-least one collection
                            if (self.collections().length === 0) {
                                self.collections(getDefaultCollections());
                                self.saveCollection(false);
                            }
                        }
                    });
                };

                self.groups = ko.pureComputed(() => self.selectedCollection() ? self.selectedCollection().groups() : []);

                self.results = ko.observableArray([]);
                self.results_timestamp = ko.observable(null);
                self.results_timestamp_formatted = ko.pureComputed(() => 
                    self.results_timestamp() ? `(${new Date(self.results_timestamp()).toLocaleString()})` : '(unknown)');

                self.addGroup = () => {
                    const collection = self.selectedCollection();
                    collection.groups.push(new Group(uuidv4(), `Group #${collection.groups().length}`));
                    $('[autofocus]:last').focus();
                };

                self.removeGroup = (indexToRemove) => {
                    self.selectedCollection().groups.splice(indexToRemove, 1);
                    self.validateGroups();
                };

                let _validateParticipants = async () => {
                    let participantCount = self.groups().reduce((total, group, test) => { return total + group.getParticipants().length; }, 0);
                    // must have participants to draw names
                    if (participantCount === 0) {
                        Swal.fire({
                            icon: 'warning',
                            title: 'Whoa! Hold on there&hellip;',
                            html: '<hr />You\'re gonna have to add some people first!',
                        });
                        return Promise.resolve(false);
                    }
                    // must have more than one participant to draw names
                    if (participantCount === 1) {
                        Swal.fire({
                            icon: 'error',
                            title: 'Hate to tell you this, but&hellip;',
                            html: '<hr />Unfortunately, <b>1</b> person just isn\'t a party&hellip;<br />You\'re gonna have to add some more people!',
                        });
                        return Promise.resolve(false);
                    }


                    let shouldSendGroupSizeWarning = false;
                    for (let i = 1; i < self.groups().length; ++i) {
                        const groupSize = self.groups()[i].participants().length;
                        if (groupSize > (participantCount - groupSize)) {
                            shouldSendGroupSizeWarning = true;
                            break;
                        }
                    }

                    if (shouldSendGroupSizeWarning) {
                        return Swal.fire({
                            icon: 'warning',
                            title: 'Are you sure?',
                            html: `<hr />Some of the groups are too large and will likely result in some participants not getting to play 😢`,
                            confirmButtonText: `Let's do it anyway!`,
                            showCancelButton: true,
                            cancelButtonText: 'No, wait&hellip;',
                            showLoaderOnConfirm: true,
                            customClass: {
                                actions: 'justify-content-end'
                            }
                        }).then(result => !!result.value);
                    }

                    return Promise.resolve(true);
                };

                self.validateGroups = () => {
                    let participantCount = self.groups().reduce((total, group, test) => { return total + group.getParticipants().length; }, 0);
                    for (let i = 1; i < self.groups().length; ++i) {
                        let groupSize = self.groups()[i].participants().length;
                        if (groupSize > (participantCount - groupSize)) {
                            self.groups()[i].warningMessage('This group is a bit too large - consider breaking it up&hellip;<br /><center><span class="text-muted">(everyone may not get to play)</span></center>');
                        } else if (groupSize == 1) {
                            self.groups()[i].warningMessage('Groups should have <i>at least</i> <b>2</b> members to be effective&hellip;');
                        } else {
                            self.groups()[i].warningMessage('');
                        }
                    }
                };

                self.drawNames = (data, event) => {
                    _validateParticipants()
                        .then(valid => {
                            if (!valid) return;

                            var postData = [];
                            for (let i = 0; i < self.groups().length; ++i) {
                                var groupParticipants = self.groups()[i].getParticipants();
                                // the first group is the Individual Participants and they need to be split up
                                if (i === 0) {
                                    for (let j = 0; j < groupParticipants.length; ++j) {
                                        postData.push([groupParticipants[j]]);
                                    }
                                } else if (groupParticipants.length > 0) {
                                    postData.push(groupParticipants);
                                }
                            }

                            $(event.currentTarget).button('loading');
                            var minLoadingTime = 250;
                            var drawingStart = Date.now();
                            fetch('api/SecretSanta/DrawNames',
                                    {
                                        method: 'POST',
                                        headers: {
                                            'Content-Type': 'application/json',
                                        },
                                        body: JSON.stringify(postData)
                                    })
                                .then(res => res.ok ? res : Promise.reject(res.statusText))
                                .then(res => res.json())
                                .then(data => delayAsync(minLoadingTime - (Date.now() - drawingStart)).then(_ => data))
                                .then(data => data.map(x => {
                                    x.recipient = (x.recipient || { name: '<b class="text-danger">??</b>' });
                                    return x;
                                }))
                                .then((data) => {
                                    $(event.currentTarget).button('reset');
                                    self.results(data);
                                    self.results_timestamp(Date.now());

                                    // scroll to the results section
                                    document.querySelector('#results').scrollIntoViewAsync({ behavior: 'smooth' })
                                        .then(_ => Toast.fire({ icon: 'success', title: `🎁 Let the gift-giving begin! 🎄` }));
                                })
                                .catch(showError);
                        });
                };
            }

            ko.applyBindings(new SecretSantaViewModel());

            focusInput();
        })();

        function focusInput(groupId = 0) {
            $(`[data-group=${groupId}] [autofocus]:last`).focus();
        }
    </script>
}