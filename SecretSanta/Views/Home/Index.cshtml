@{
}

<div class="bd-callout bd-callout-info mt-0 mb-3 box-shadow">
    <h5>Who wants to draw names <b><i><code>WHEN WE HAVE COMPUTERS?!!?!?!</code></i></b></h5>
    <div class="description mb-3">
        <p>
            Tell ol' Computer Santa who all's coming to your Yuletide Shindig and we'll mix it up for ya!
            <br />You can even add groups if you want to keep certain people from being assigned to each other, etc&hellip;
        </p>
        <p>
            When you're ready, poke the big red button to get the party started! <br />
            <span class="text-muted">(feel free to redraw at anytime if you don't like the way it shakes out)</span>
        </p>
    </div>
    <div class="row clear">
        <div class="col">
            <p class="clear text-center">
                <button id="btnDrawNames" type="button" tabindex="-1" class="btn btn-danger" style="margin-left: -0.75em;"
                        onclick="this.blur()"
                        data-loading-text="<i class='spinner-border spinner-border-sm'></i>&nbsp; Drawing&hellip;"
                        data-success-text="Let the gift-giving begin! <span class='fa fa-gift'></span> <span class='glyphicon glyphicon-gift'></span>"
                        data-bind="click: drawNames">
                    <b>Draw!</b>
                </button>
            </p>
        </div>
    </div>
</div>

<div class="container-fluid">
    <div class="row justify-content-between mb-3">
        <div class="col-4">
            <button class="btn" data-bind="click: addGroup" tabindex="-1"><i class="fa fa-plus"></i> Group</button>
        </div>
        <div class="col col-sm-8 col-md-6 col-lg-5 col-xl-4">
            <div class="input-group">
                <div class="input-group-prepend">
                    <button type="button" class="btn no-outline" tabindex="-1"
                            data-bind="click: addCollection">
                        <i class="fa fa-plus"></i>
                    </button>
                </div>
                <select class="custom-select" tabindex="-1" onchange="this.blur()"
                        data-bind="options: collections, optionsText: 'name', value: selectedCollection">
                </select>
                <div class="input-group-append">
                    <button type="button" class="btn btn-outline-secondary" tabindex="-1"
                            title="save collection"
                            onclick="this.blur()"
                            data-bind="click: editCollection">
                        <i class="fa fa-pencil"></i>
                    </button>
                    <button type="button" class="btn btn-outline-success" tabindex="-1"
                            title="save collection"
                            onclick="this.blur()"
                            data-bind="click: saveCollection">
                        <i class="fa fa-save"></i>
                    </button>
                    <button type="button" class="btn btn-outline-danger" tabindex="-1"
                            title="delete collection"
                            onclick="this.blur()"
                            data-bind="click: deleteCollection">
                        <i class="fa fa-trash"></i>
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div class="row groups" data-bind="foreach: groups">
        <div class="px-2 col-12 col-sm-4 col-xl-3" data-bind="attr: { 'data-group': id }">
            <fieldset class="group">
                <div>
                    <legend data-bind="editableHTML: name, attr: { contenteditable: $index() != 0 ? 'true' : 'false' }"
                            tabindex="-1">
                        Individual Participants
                    </legend>
                    <span class="btn-close hide" data-bind="css: { hide: $index() === 0 }, click: () => { $parent.removeGroup($index()); }">&times;</span>
                </div>
                <div class="bd-callout bd-callout-warning hide" data-bind="html: warningMessage, css: { hide: !warningMessage()}">test</div>
                <table class="table hide" data-bind="css: { hide: participants().length === 0 }">
                    <thead>
                    </thead>
                    <tbody data-bind="foreach: participants">
                        <tr>
                            <td class="participant">
                                <div class="data" data-bind="editableHTML: $data" contenteditable="true" tabindex="-1"></div>
                                <span class="btn-close" data-bind="click: () => { $parent.removeParticipant($index()); $root.validateGroups(); }">&times;</span>
                            </td>
                        </tr>
                    </tbody>
                </table>

                <form data-bind="submit: () => { addParticipant(); $parent.validateGroups(); }">
                    <div class="input-group">
                        <input type="text"
                               class="form-control"
                               data-bind="value: newParticipantName, attr: { tabindex: $index() + 1 }"
                               placeholder="Name"
                               autofocus />
                        <span class="input-group-append">
                            <button type="submit" class="btn" tabindex="-1"><i class="fa fa-plus"></i></button>
                        </span>
                    </div>
                </form>
            </fieldset>
        </div>
    </div>
</div>

<div id="results" class="hide" data-bind="css: { hide: results().rows.length === 0 }">
    <hr class="my-5" />

    <img class="logo img-fluid float-left mr-2" src="~/images/logo.png" style="max-width: 125px;" />
    <button type="button" class="btn btn-outline-danger float-right" title="clear results"
        data-bind="click: selectedCollection().clearResults"><i class="fa fa-trash"></i></button>
    <h5>The results are in! 🎉</h5>
    <p>We got 'em all matched up! Check it out below to see who's paired with who.</p>
    <p>Go forth and be merry!</p>

    <br />

    <table class="table table-bordered table-striped table-hover">
        <caption>Secret Santas and their Recipients!</caption>
        <thead>
            <tr>
                <th>Santa</th>
                <th>Recipient</th>
            </tr>
        </thead>
        <tbody data-bind="foreach: results().rows">
            <tr>
                <td data-bind="text: name"></td>
                <td data-bind="html: recipient.name"></td>
            </tr>
        </tbody>
        <tfoot>
            <tr><td colspan="2"><span class="text-muted float-right" data-bind="text: results().timestamp"></span></td></tr>
        </tfoot>
    </table>

    <div class="bd-callout bd-callout-warning">
        <p>
            If you don't like the way the way it all shook out, feel free to
            <button type="button" class="btn btn-outline-primary box-shadow"
                    onclick="this.blur()"
                    data-loading-text="<i class='spinner-border spinner-border-sm'></i>&nbsp; Drawing&hellip;"
                    data-bind="click: drawNames">
                draw again 👍
            </button>
        </p>
    </div>
</div>

@section scripts {
    <script type="text/javascript">
        (() => {
            $(() => { ko.applyBindings(new SecretSantaViewModel()); if (!isMobileDevice()) ko.tasks.schedule(focusInput); });

            const _collectionsStorageKey = 'collections';

            class Collection {
                constructor(id, name, groups, results, results_timestamp) {
                    var self = this;
                    self.id = id;
                    self.name = ko.observable(name);
                    self.groups = ko.observableArray(groups);
                    self.results = ko.observableArray(results || []);
                    self.results_timestamp = ko.observable(results_timestamp || null);
                    self.results_timestamp_formatted = ko.pureComputed(() => 
                        self.results_timestamp() ? new Date(self.results_timestamp()).toLocaleString() : '');
                }

                save() {
                    const flattenedCollection = {
                        ...this,
                        name: this.name(),
                        groups: this.groups().map(g => ({
                            ...g,
                            name: g.name(),
                            participants: g.participants().map(p => p())
                        })),
                        results: this.results(),
                        results_timestamp: this.results_timestamp()
                    };

                    const collections = JSON.parse(localStorage[_collectionsStorageKey] || '[]');
                    const index = collections.findIndex(x => x.id === this.id);

                    if (index === -1) {
                        collections.push(flattenedCollection);
                    } else {
                        collections[index] = flattenedCollection;
                    }

                    localStorage.setItem(_collectionsStorageKey, JSON.stringify(collections));
                };

                delete() {
                    const filteredCollections = JSON.parse(localStorage[_collectionsStorageKey] || '[]')
                        .filter(x => x.id != this.id);
                    
                    localStorage.setItem(_collectionsStorageKey, JSON.stringify(filteredCollections));
                };

                clearResults = () => {
                    this.results([]);
                    this.results_timestamp(null);
                    this.save();
                };

                get participantCount() {
                    return this.groups().reduce((total, group, test) => { return total + group.participantCount; }, 0);
                }

                static defaultCollections() {
                    return [new Collection(uuidv4(), 'Collection #1', Group.defaultGroups())];
                }

                static loadCollections() {
                    return JSON.parse(localStorage[_collectionsStorageKey] || '[]')
                        .map(x => new Collection(x.id, x.name, x.groups.map(g => new Group(g.id, g.name, g.participants)), x.results, x.results_timestamp));
                }
            }

            class Group {
                constructor(id, name, participants) {
                    var self = this;
                    self.id = id;
                    self.name = ko.observable(name || 'Unknown');
                    self.warningMessage = ko.observable('');
                    self.participants = ko.observableArray((participants || []).map(x => ko.observable(x)));
                    self.newParticipantName = ko.observable('');
                }

                addParticipant() {
                    if (this.newParticipantName()) {
                        this.participants.push(ko.observable(this.newParticipantName()));
                        this.newParticipantName('');
                    }
                    focusInput(this.id);
                };

                removeParticipant(indexToRemove) {
                    this.participants.splice(indexToRemove, 1);
                };

                getParticipants() {
                    return this.participants().map((participant) => ({ name: participant() }));
                };

                get participantCount() {
                    return this.participants().length;
                }

                static defaultGroups() {
                    return [new Group(uuidv4(), 'Individual Participants'), new Group(uuidv4(), 'Group #1')];
                }
            }

            class SecretSantaViewModel {
                constructor() {
                    var self = this;
                    const savedCollections = Collection.loadCollections();
                    self.collections = ko.observableArray(
                        savedCollections.length > 0
                        ? savedCollections
                        : Collection.defaultCollections());
                    self.selectedCollection = ko.observable(self.collections()[0]);
                    self.groups = ko.pureComputed(() => self.selectedCollection() ? self.selectedCollection().groups() : []);
                    self.validateGroups();
                    self.results = ko.pureComputed(() => self.selectedCollection() 
                        ? { rows: self.selectedCollection().results(), timestamp: self.selectedCollection().results_timestamp_formatted() } 
                        : { rows: [] });
                }

                saveCollection() {
                    this.selectedCollection().save();
                    Toast.fire({ icon: 'success', title: 'Collection saved! 🎉' });
                }

                addCollection() {
                    Swal.fire({
                        title: 'Add a new collection',
                        html:
                            `<hr/>
                            <div class="text-left">
                                <div class="form-group row">
                                    <label for="swal-form-name" class="col-sm-3 col-form-label">Name:</label>
                                    <div class="col-sm-9">
                                        <input id="swal-form-name" type="text" class="form-control" placeholder="Grandma's house" aria-label="Trigger" required>
                                    </div>
                                </div>
                                <div class="bs-callout bs-callout-warning text-left">
                                    <code>Collections</code> let you create multiple sets of participants
                                </div>
                            </div>`,
                        focusConfirm: false,
                        confirmButtonText: '<i class="fa fa-save"></i>&nbsp;Save',
                        confirmButtonColor: '#28a745',
                        showCancelButton: true,
                        cancelButtonText: 'Nevermind&hellip;',
                        showLoaderOnConfirm: true,
                        customClass: {
                            actions: 'justify-content-end'
                        },
                        preConfirm: () => {
                            const name = document.getElementById('swal-form-name').value;

                            if (!name || !name.trim()) {
                                Swal.showValidationMessage('<code>name</code>&nbsp; cannot be empty!');
                                return false;
                            }

                            this.collections.push(new Collection(uuidv4(), name, Group.defaultGroups()));
                            this.selectedCollection(this.collections()[this.collections().length - 1]);
                            this.selectedCollection().save();

                            Toast.fire({ icon: 'success', title: 'Collection added! 😎' });

                            setTimeout(focusInput, 250);
                        }
                    });
                };

                editCollection() {
                    const selectedCollection = this.selectedCollection();
                    Swal.fire({
                        title: 'Edit collection',
                        html:
                            `<hr/>
                            <div class="text-left">
                                <div class="form-group row">
                                    <label for="swal-form-name" class="col-sm-3 col-form-label">Name:</label>
                                    <div class="col-sm-9">
                                        <input id="swal-form-name" type="text" class="form-control" placeholder="Name" aria-label="Trigger" value="${selectedCollection.name()}" required>
                                    </div>
                                </div>
                            </div>`,
                        focusConfirm: false,
                        confirmButtonText: '<i class="fa fa-save"></i>&nbsp;Save',
                        confirmButtonColor: '#28a745',
                        showCancelButton: true,
                        cancelButtonText: 'Nevermind&hellip;',
                        showLoaderOnConfirm: true,
                        customClass: {
                            actions: 'justify-content-end'
                        },
                        preConfirm: () => {
                            const name = document.getElementById('swal-form-name').value;

                            if (!name || !name.trim()) {
                                Swal.showValidationMessage('<code>name</code>&nbsp; cannot be empty!');
                                return false;
                            }

                            selectedCollection.name(name);
                            this.saveCollection();
                        }
                    });
                };

                deleteCollection() {
                    const selectedCollection = this.selectedCollection();
                    Swal.fire({
                        icon: 'warning',
                        title: 'Are you sure?',
                        html:
                            `<hr/>
                            <div class="bs-callout bs-callout-danger text-left">
                                This action will permanantly wipe the <code>${selectedCollection.name()}</code> collection
                            </div>`,
                        focusConfirm: false,
                        confirmButtonText: '🔥 Burn it with fire!',
                        confirmButtonColor: '#dc3545',
                        showCancelButton: true,
                        cancelButtonText: 'Nevermind&hellip;',
                        showLoaderOnConfirm: true,
                        customClass: {
                            actions: 'justify-content-end'
                        },
                        preConfirm: () => {
                            selectedCollection.delete();

                            // filter deleted item out of in-memory collections
                            this.collections(this.collections().filter(x => {
                                if (x.id != selectedCollection.id) return true;
                                Toast.fire({ icon: 'error', title: `Deleted collection: &nbsp;<b>${x.name()}</b>` });
                            }));

                            // ensure at-least one collection
                            if (this.collections().length === 0) {
                                this.collections(Collection.defaultCollections());
                                this.selectedCollection(this.collections[0]);
                            }
                        }
                    });
                };

                addGroup() {
                    const collection = this.selectedCollection();
                    collection.groups.push(new Group(uuidv4(), `Group #${collection.groups().length}`));
                    $('[autofocus]:last').focus();
                };

                removeGroup(indexToRemove) {
                    this.selectedCollection().groups.splice(indexToRemove, 1);
                    this.validateGroups();
                };

                validateGroups() {
                    const totalParticipants = this.selectedCollection().participantCount;
                    Array.from(this.groups().slice(1)).forEach((group) => {
                        const groupSize = group.participantCount;
                        const warningMessage = (groupSize > (totalParticipants - groupSize)) 
                            ? 'This group is a bit too large - consider breaking it up&hellip;<br /><center><span class="text-muted">(everyone may not get to play)</span></center>'
                            : (groupSize == 1)
                                ? 'Groups should have <i>at least</i> <b>2</b> members to be effective&hellip;'
                                : '';
                        group.warningMessage(warningMessage);
                    })
                };

                async _validateParticipants() {
                    const totalParticipants = this.selectedCollection().participantCount;

                    // must have participants to draw names
                    if (totalParticipants === 0) {
                        return Swal.fire({
                            icon: 'warning',
                            title: 'Whoa! Hold on there&hellip;',
                            html: '<hr />You\'re gonna have to add some people first!',
                        }).then(_ => Promise.resolve(false));
                    }

                    // must have more than one participant to draw names
                    if (totalParticipants === 1) {
                        return Swal.fire({
                            icon: 'error',
                            title: 'Hate to tell you this, but&hellip;',
                            html: '<hr />Unfortunately, <b>1</b> person just isn\'t a party&hellip;<br />You\'re gonna have to add some more people!',
                        }).then(_ => Promise.resolve(false));
                    }

                    const invalidGroupSize = Array.from(this.groups().slice(1))
                        .some(group => group.participantCount > (totalParticipants - group.participantCount));

                    if (invalidGroupSize) {
                        return Swal.fire({
                            icon: 'warning',
                            title: 'Are you sure?',
                            html: `<hr />Some of the groups are too large and will likely result in some participants not getting to play 😢`,
                            confirmButtonText: `Let's do it anyway!`,
                            showCancelButton: true,
                            cancelButtonText: 'No, wait&hellip;',
                            customClass: {
                                actions: 'justify-content-end'
                            }
                        }).then(result => !!result.value);
                    }

                    return Promise.resolve(true);
                };

                drawNames = (data, event) => {
                    this._validateParticipants()
                        .then(valid => {
                            if (!valid) return;

                            var postData = [];
                            this.groups().forEach((group, i) => {
                                const groupParticipants = group.getParticipants();
                                if (i === 0) { // the first group is the Individual Participants and they need to be split up
                                    groupParticipants.forEach(participant => postData.push([participant]))
                                } else if (groupParticipants.length > 0) {
                                    postData.push(groupParticipants);
                                }
                            });

                            $(event.currentTarget).button('loading');
                            var minLoadingTime = 250;
                            var drawingStart = Date.now();
                            fetch('api/SecretSanta/DrawNames',
                                    {
                                        method: 'POST',
                                        headers: {
                                            'Content-Type': 'application/json',
                                        },
                                        body: JSON.stringify(postData)
                                    })
                                .then(res => res.ok ? res : Promise.reject(res.statusText))
                                .then(res => res.json())
                                .then(data => delayAsync(minLoadingTime - (Date.now() - drawingStart)).then(_ => data))
                                .then(data => data.map(x => ({ ...x, recipient: x.recipient || { name: '<b class="text-danger">??</b>' } })))
                                .then((data) => {
                                    $(event.currentTarget).button('reset');

                                    const selectedCollection = this.selectedCollection();
                                    selectedCollection.results(data);
                                    selectedCollection.results_timestamp(Date.now());
                                    selectedCollection.save();

                                    // scroll to the results section
                                    const resultsElement = document.querySelector('#results');
                                    const intersectMargin = Math.max(resultsElement.offsetHeight - window.innerHeight, 0);
                                    resultsElement.scrollIntoViewAsync({ behavior: 'smooth' }, { rootMargin: `0px 0px ${intersectMargin + 15}px 0px` })
                                        .then(_ => Toast.fire({ icon: 'success', title: `🎁 Let the gift-giving begin! 🎄` }));
                                })
                                .catch(showError);
                        });
                };
            }

            function focusInput(groupId) {
                groupId
                    ? $(`[data-group=${groupId}] [autofocus]:last`).focus()
                    : $(`[data-group]:first [autofocus]:last`).focus();
            }
        })();
    </script>
}